import { Order, OrderItem, Product, User, Cart } from '../models/index.js';
import { Op } from 'sequelize';

// Dashboard para cliente
export const getDashboardData = async (req, res) => {
    try {
        console.log('üéØ getDashboardData - Iniciando...');
        console.log('üéØ req.params:', req.params);
        console.log('üéØ req.user:', req.user ? { id: req.user.id, tipo: req.user.tipo } : 'NO USER');
        
        const { userId } = req.params;
        
        // Verificar que el usuario solo pueda ver sus propios datos o sea admin
        // üîß FIX: Convertir ambos valores a string para comparar correctamente
        if (req.user.id.toString() !== userId.toString() && req.user.tipo !== 'admin') {
            console.log('‚ùå Acceso denegado: usuario no autorizado');
            console.log(`‚ùå Comparaci√≥n: req.user.id(${req.user.id}) !== userId(${userId})`);
            return res.status(403).json({
                success: false,
                message: 'No tienes permisos para ver esta informaci√≥n'
            });
        }

        console.log('‚úÖ Usuario autorizado, obteniendo estad√≠sticas...');
        console.log('üéØ req.user:', req.user ? { id: req.user.id, tipo: req.user.tipo } : 'NO USER');
        
        const { userId } = req.params;
        
        // Verificar que el usuario solo pueda ver sus propios datos o sea admin
        if (parseInt(req.user.id) !== parseInt(userId) && req.user.tipo !== 'admin') {
            console.log('‚ùå Acceso denegado: usuario no autorizado');
            return res.status(403).json({
                success: false,
                message: 'No tienes permisos para ver esta informaci√≥n'
            });
        }

        console.log('‚úÖ Usuario autorizado, obteniendo estad√≠sticas...');

        // Estad√≠sticas del cliente
        const totalOrders = await Order.count({
            where: { userId }
        });

        const orders = await Order.findAll({
            where: { userId },
            include: [
                {
                    model: OrderItem,
                    include: [Product]
                }
            ],
            order: [['createdAt', 'DESC']],
            limit: 5
        });

        const totalSpent = await Order.sum('total', {
            where: { 
                userId,
                paymentStatus: 'completed'
            }
        }) || 0;

        const pendingOrders = await Order.count({
            where: { 
                userId,
                status: 'processing'
            }
        });

        res.json({
            success: true,
            data: {
                totalOrders,
                totalSpent,
                pendingOrders,
                recentOrders: orders
            }
        });

    } catch (error) {
        console.error('Error en getDashboardData:', error);
        res.status(500).json({
            success: false,
            message: 'Error al obtener datos del dashboard'
        });
    }
};

// Obtener todas las √≥rdenes de un usuario
export const getUserOrders = async (req, res) => {
    try {
        const { userId } = req.params;
        const { page = 1, limit = 10, status } = req.query;
        
        // Verificar permisos
        if (req.user.id !== parseInt(userId) && req.user.tipo !== 'admin') {
            return res.status(403).json({
                success: false,
                message: 'No tienes permisos para ver esta informaci√≥n'
            });
        }

        const whereClause = { userId };
        if (status) {
            whereClause.status = status;
        }

        const offset = (page - 1) * limit;

        const { rows: orders, count } = await Order.findAndCountAll({
            where: whereClause,
            include: [
                {
                    model: OrderItem,
                    include: [Product]
                }
            ],
            order: [['createdAt', 'DESC']],
            limit: parseInt(limit),
            offset: offset
        });

        const totalPages = Math.ceil(count / limit);

        res.json({
            success: true,
            data: {
                orders,
                pagination: {
                    currentPage: parseInt(page),
                    totalPages,
                    totalOrders: count,
                    hasNextPage: page < totalPages,
                    hasPrevPage: page > 1
                }
            }
        });

    } catch (error) {
        console.error('Error en getUserOrders:', error);
        res.status(500).json({
            success: false,
            message: 'Error al obtener las √≥rdenes del usuario'
        });
    }
};

// Obtener detalles de una orden espec√≠fica
export const getOrderDetails = async (req, res) => {
    try {
        const { orderId } = req.params;

        const order = await Order.findByPk(orderId, {
            include: [
                {
                    model: OrderItem,
                    include: [Product]
                },
                {
                    model: User,
                    attributes: ['nombres', 'apellidos', 'correo', 'telefono']
                },
                {
                    model: Cart
                }
            ]
        });

        if (!order) {
            return res.status(404).json({
                success: false,
                message: 'Orden no encontrada'
            });
        }

        // Verificar permisos
        if (req.user.id !== order.userId && req.user.tipo !== 'admin') {
            return res.status(403).json({
                success: false,
                message: 'No tienes permisos para ver esta orden'
            });
        }

        res.json({
            success: true,
            data: order
        });

    } catch (error) {
        console.error('Error en getOrderDetails:', error);
        res.status(500).json({
            success: false,
            message: 'Error al obtener los detalles de la orden'
        });
    }
};

// Dashboard para administrador - Obtener todas las √≥rdenes
export const getAllOrders = async (req, res) => {
    try {
        // Verificar que el usuario sea admin
        if (req.user.tipo !== 'admin') {
            return res.status(403).json({
                success: false,
                message: 'No tienes permisos de administrador'
            });
        }

        const { page = 1, limit = 10, status, search } = req.query;
        const offset = (page - 1) * limit;

        let whereClause = {};
        if (status) {
            whereClause.status = status;
        }

        // Si hay b√∫squeda, buscar por email del usuario o ID de orden
        let userWhereClause = {};
        if (search) {
            userWhereClause = {
                [Op.or]: [
                    { correo: { [Op.iLike]: `%${search}%` } },
                    { nombres: { [Op.iLike]: `%${search}%` } },
                    { apellidos: { [Op.iLike]: `%${search}%` } }
                ]
            };
        }

        const { rows: orders, count } = await Order.findAndCountAll({
            where: whereClause,
            include: [
                {
                    model: OrderItem,
                    include: [Product]
                },
                {
                    model: User,
                    attributes: ['nombres', 'apellidos', 'correo', 'telefono'],
                    where: Object.keys(userWhereClause).length > 0 ? userWhereClause : undefined
                }
            ],
            order: [['createdAt', 'DESC']],
            limit: parseInt(limit),
            offset: offset
        });

        const totalPages = Math.ceil(count / limit);

        // Estad√≠sticas adicionales para admin
        const totalOrders = await Order.count();
        const pendingOrders = await Order.count({ where: { status: 'processing' } });
        const completedOrders = await Order.count({ where: { status: 'completed' } });
        const totalRevenue = await Order.sum('total', { 
            where: { paymentStatus: 'completed' } 
        }) || 0;

        res.json({
            success: true,
            data: {
                orders,
                pagination: {
                    currentPage: parseInt(page),
                    totalPages,
                    totalOrders: count,
                    hasNextPage: page < totalPages,
                    hasPrevPage: page > 1
                },
                statistics: {
                    totalOrders,
                    pendingOrders,
                    completedOrders,
                    totalRevenue
                }
            }
        });

    } catch (error) {
        console.error('Error en getAllOrders:', error);
        res.status(500).json({
            success: false,
            message: 'Error al obtener las √≥rdenes'
        });
    }
};

// Actualizar estado de una orden (solo admin)
export const updateOrderStatus = async (req, res) => {
    try {
        // Verificar que el usuario sea admin
        if (req.user.tipo !== 'admin') {
            return res.status(403).json({
                success: false,
                message: 'No tienes permisos de administrador'
            });
        }

        const { orderId } = req.params;
        const { status, paymentStatus } = req.body;

        const order = await Order.findByPk(orderId);
        if (!order) {
            return res.status(404).json({
                success: false,
                message: 'Orden no encontrada'
            });
        }

        const updateData = {};
        if (status) updateData.status = status;
        if (paymentStatus) updateData.paymentStatus = paymentStatus;

        await order.update(updateData);

        // Obtener la orden actualizada con todas las relaciones
        const updatedOrder = await Order.findByPk(orderId, {
            include: [
                {
                    model: OrderItem,
                    include: [Product]
                },
                {
                    model: User,
                    attributes: ['nombres', 'apellidos', 'correo', 'telefono']
                }
            ]
        });

        res.json({
            success: true,
            message: 'Estado de la orden actualizado exitosamente',
            data: updatedOrder
        });

    } catch (error) {
        console.error('Error en updateOrderStatus:', error);
        res.status(500).json({
            success: false,
            message: 'Error al actualizar el estado de la orden'
        });
    }
};
